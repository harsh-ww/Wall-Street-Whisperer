from flask import Flask, request, jsonify, Blueprint
from connect import get_db_connection
import services.AlphaVantageService as av

track_blueprint = Blueprint('track', __name__)

# check if company is already tracked
def check_already_tracked(ticker:str) -> bool:
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("SELECT * FROM company WHERE TickerCode = %s AND Tracked=TRUE", (ticker,))
        existing_company = cur.fetchone()
    
    conn.close()

    return existing_company is not None
    
# Save tracked company to db
def save_tracked_company(ticker:str, officialName:str, commonName: str, exchange:str, currency:str) -> int:
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("INSERT INTO company (CompanyName, CommonName, TickerCode, Exchange, Currency) VALUES (%s, %s, %s, %s, %s) RETURNING CompanyID",
                    (officialName, commonName, ticker, exchange, currency))
        new_company_id = cur.fetchone()[0]  # Return the company id generated by the insertion
        conn.commit()
    conn.close()
    return new_company_id

# Get company details from AV
def get_company_info(ticker:str):
    if "." in ticker:
        details = av.getCompanyDetailsNonUS(ticker)
        if not details:
            return None
        return {'name': details['name'], 'exchange': details['exchange'], 'currency': details['currency']}
    else:
        details = av.getCompanyDetails(ticker)
        if not details:
            return None
        return {'name': details['Name'], 'exchange': details['Exchange'], 'currency': details['Currency']}

# endpoint to track a company
@track_blueprint.route('/track', methods=['POST'])
def track_company():
    # Get request body
    data = request.get_json()

    ticker_code = data.get('ticker_code')
    common_name = data.get('common_name')
    
    # Verify required details have been sent
    if not ticker_code:
        return jsonify({'error': 'Ticker code is required'}), 400
    if not common_name:
        return jsonify({'error': 'Common name is required'}), 400

    # Check if already tracked
    if check_already_tracked(ticker_code):
          return jsonify({'error': 'Company already tracked'}), 409
    
    # Get company details from AV
    company_details = get_company_info(ticker_code)
    if company_details is None:
        jsonify({'error': 'Ticker code does not exist'}), 400
    
    company_official_name = company_details['name']
    company_exchange = company_details['exchange']
    company_currency = company_details['currency']

    # Save tracked company to db
    save_tracked_company(ticker_code, company_official_name, common_name, company_exchange, company_currency)

    return jsonify({'message': 'Company successfully tracked'}), 201

# Get all tracked companies
@track_blueprint.route('/tracked', methods=['GET'])
def get_tracked_companies():
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("""
            SELECT c.CompanyID, c.CompanyName, c.TickerCode, c.Exchange, c.CommonName, c.Currency
            FROM company c WHERE Tracked=True
        """)
                    # INNER JOIN user_follows_company ufc ON c.CompanyID = ufc.CompanyID
        tracked_companies = [{
            'id': row[0],
            'name': row[1],
            'TickerCode': row[2],
            'exchange': row[3],
            'CommonName': row[4],
            'currency': row[5]
        } for row in cur.fetchall()]
    
    conn.close()

    if request.args.get('data') is not None:
        # Add stock data to companies
        return [{**company, 'stock': av.getCurrentStockPrice(company['TickerCode'])} for company in tracked_companies]

    
    return jsonify(tracked_companies)

# Untrack company in db
def untrack_db(ticker: str):
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("UPDATE company SET Tracked=FALSE WHERE TickerCode=%s", [ticker])
        conn.commit()
    conn.close()
 
# API endpoint to untrack a company
@track_blueprint.route('/untrack', methods=['POST'])
def untrack_company():
    # Get request body
    data = request.get_json()
    print("Testing")
    ticker_code = data.get('ticker_code')
    
    if not check_already_tracked(ticker_code):
        return jsonify({'error': f'Ticker {ticker_code} is not tracked'}), 400

    if not ticker_code:
        return jsonify({'error': 'Ticker code is required'}), 400
    
    untrack_db(ticker_code)

    return jsonify({'message': 'success'}), 204

