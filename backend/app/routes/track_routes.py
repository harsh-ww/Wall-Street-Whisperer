"""
This module contains flask endpoints that is related to tracking and untracking a company.
"""
import psycopg2
import logging
from flask import Flask, request, jsonify, Blueprint
from connect import get_db_connection
import services.AlphaVantageService as av

track_blueprint = Blueprint("track", __name__)


def check_already_tracked(ticker: str) -> bool:
    """
    Return whether or not a company with a given ticker code is tracked,
    which will only be present in the database if it is
    """
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute("SELECT * FROM company WHERE TickerCode = %s", (ticker,))
        existing_company = cur.fetchone()

    conn.close()

    return existing_company is not None


def save_tracked_company(
    ticker: str, officialName: str, commonName: str, exchange: str
) -> int:
    """
    Add the company to the database to mark it as tracked.
    """
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute(
            "INSERT INTO company (CompanyName, CommonName, TickerCode, Exchange) VALUES (%s, %s, %s, %s) RETURNING CompanyID",
            (officialName, commonName, ticker, exchange),
        )
        new_company_id = cur.fetchone()[
            0
        ]  # Return the company id generated by the insertion
        conn.commit()
    conn.close()
    return new_company_id


def get_company_info(ticker: str):
    """
    Get the company name and exchange from a given ticker
    """
    if "." in ticker:
        details = av.getCompanyDetailsNonUS(ticker)
        if not details:
            return None
        return {"name": details["name"], "exchange": details["exchange"]}
    else:
        details = av.getCompanyDetails(ticker)
        if not details:
            return None
        return {"name": details["Name"], "exchange": details["Exchange"]}


@track_blueprint.route("/track", methods=["POST"])
def track_company():
    """
    Endpoint to track a company
    Input: Ticker code and Common name
    Return whether or not the company is added to database and is successfully tracked
    """

    # Get request body
    data = request.get_json()

    ticker_code = data.get("ticker_code")
    common_name = data.get("common_name")

    # Verify required details have been sent
    if not ticker_code:
        return jsonify({"error": "Ticker code is required"}), 400
    if not common_name:
        return jsonify({"error": "Common name is required"}), 400

    # Check if already tracked
    if check_already_tracked(ticker_code):
        return jsonify({"error": "Company already tracked"}), 409

    # Get company details from AV
    company_details = get_company_info(ticker_code)
    if company_details is None:
        return jsonify({"error": "Ticker code does not exist"}), 400

    company_official_name = company_details["name"]
    company_exchange = company_details["exchange"]

    # Save tracked company to db
    save_tracked_company(
        ticker_code, company_official_name, common_name, company_exchange
    )

    return jsonify({"message": "Company successfully tracked"}), 201


@track_blueprint.route("/tracked", methods=["GET"])
def get_tracked_companies():
    """
    Returns a list of tracked companies
    """
    conn = get_db_connection()
    with conn.cursor() as cur:
        cur.execute(
            """
            SELECT c.CompanyID, c.CompanyName, c.TickerCode, c.Exchange, c.CommonName
            FROM company c
        """
        )
        # INNER JOIN user_follows_company ufc ON c.CompanyID = ufc.CompanyID
        tracked_companies = [
            {
                "id": row[0],
                "name": row[1],
                "TickerCode": row[2],
                "exchange": row[3],
                "CommonName": row[4],
            }
            for row in cur.fetchall()
        ]

    conn.close()

    return jsonify(tracked_companies)
